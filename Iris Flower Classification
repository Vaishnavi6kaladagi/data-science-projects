{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOaCZ+ccbv/SF76BrWZLMPN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vaishnavi6kaladagi/data-science-projects/blob/main/Iris%20Flower%20Classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "\n",
        "# --------------------------\n",
        "# Load the Iris Dataset\n",
        "# --------------------------\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (0: setosa, 1: versicolor, 2: virginica)\n",
        "\n",
        "# Convert dataset to a Pandas DataFrame for better visualization\n",
        "iris_df = pd.DataFrame(data=np.c_[X, y], columns=iris.feature_names + ['species'])\n",
        "\n",
        "# Replace species numbers with actual names\n",
        "species_mapping = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}\n",
        "iris_df['species'] = iris_df['species'].map(species_mapping)\n",
        "\n",
        "# Display all 150 observations\n",
        "print(\"\\nðŸ”¹ Displaying 150 Observations from the Iris Dataset:\")\n",
        "print(iris_df)\n",
        "\n",
        "# --------------------------\n",
        "# Split the dataset into training and testing sets (80% training, 20% testing)\n",
        "# --------------------------\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "# Standardize features (important for KNN, not necessary for Decision Trees)\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# --------------------------\n",
        "# K-Nearest Neighbors (KNN) Model\n",
        "# --------------------------\n",
        "knn = KNeighborsClassifier(n_neighbors=5)  # k=5 chosen empirically\n",
        "knn.fit(X_train_scaled, y_train)\n",
        "y_pred_knn = knn.predict(X_test_scaled)\n",
        "\n",
        "# --------------------------\n",
        "# Decision Tree Model\n",
        "# --------------------------\n",
        "dt = DecisionTreeClassifier(criterion=\"gini\", random_state=42)\n",
        "dt.fit(X_train, y_train)\n",
        "y_pred_dt = dt.predict(X_test)\n",
        "\n",
        "# --------------------------\n",
        "# Model Evaluation Function\n",
        "# --------------------------\n",
        "def evaluate_model(y_test, y_pred, model_name):\n",
        "    print(f\"\\nðŸ”¹ {model_name} Model Evaluation:\")\n",
        "    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
        "    print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# Evaluate KNN and Decision Tree models\n",
        "evaluate_model(y_test, y_pred_knn, \"K-Nearest Neighbors (KNN)\")\n",
        "evaluate_model(y_test, y_pred_dt, \"Decision Tree\")\n",
        "\n",
        "# --------------------------\n",
        "# Visualization: Confusion Matrices\n",
        "# --------------------------\n",
        "fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
        "\n",
        "# KNN Confusion Matrix\n",
        "sns.heatmap(confusion_matrix(y_test, y_pred_knn), annot=True, cmap=\"Blues\", fmt=\"d\", ax=axes[0])\n",
        "axes[0].set_title(\"KNN Confusion Matrix\")\n",
        "axes[0].set_xlabel(\"Predicted Label\")\n",
        "axes[0].set_ylabel(\"True Label\")\n",
        "\n",
        "# Decision Tree Confusion Matrix\n",
        "sns.heatmap(confusion_matrix(y_test, y_pred_dt), annot=True, cmap=\"Greens\", fmt=\"d\", ax=axes[1])\n",
        "axes[1].set_title(\"Decision Tree Confusion Matrix\")\n",
        "axes[1].set_xlabel(\"Predicted Label\")\n",
        "axes[1].set_ylabel(\"True Label\")\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "sKwPHGhVTrZ8",
        "collapsed": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "B7e0oewLEWnk"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "j3d6c5uQT1r9"
      },
      "execution_count": 1,
      "outputs": []
    }
  ]
}